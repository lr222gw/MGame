"use strict";
var GameEngine = {
	GlobalRooms : [],
	GlobalCards : [],
	GlobalActors : [],
	
	init : function(){
		GameEngine.Machines.ReadInRooms();
		GameEngine.Machines.BuildRooms();
		
		
		
	},
	 
	Machines : {
		
		ReadInGameCards : function(){
			//Init all Cards = Skapa och hämta ner korthögen basearat på datan i "GameCards"..
		},
		
		ReadInRooms : function(){ 		// Funktion som laddar in alla rum + rumdatan..
			//Skapar alla rummen och sparar ner dem i GlobalRooms arrayen..
			
			var bathroom = new GameEngine.Classes.Room(13, "Data/Map/BathRoom/bathroom.jpg", "Bathroom");
			var prebedroom = new GameEngine.Classes.Room(4, "Data/Map/PreBedroom/prebedroom.jpg", "Bedroom Corridor");
			var bedroom1 = new GameEngine.Classes.Room(5, "Data/Map/Bedrom_1/bedroom_1.png", "Bedroom X");
			var bedroom2 = new GameEngine.Classes.Room(6, "Data/Map/Bedrom_2/bedroom_2.png", "Bedroom C");
			var bedroom3 = new GameEngine.Classes.Room(7, "Data/Map/Bedrom_3/bedroom_3.png", "Bedroom V");
			var bedroom4 = new GameEngine.Classes.Room(8, "Data/Map/Bedrom_4/bedroom_4.png", "Bedroom B");
			var bedroom5 = new GameEngine.Classes.Room(9, "Data/Map/Bedrom_5/bedroom_5.png", "Bedroom N");
			var bedroom6 = new GameEngine.Classes.Room(10, "Data/Map/Bedrom_6/bedroom_6.png", "Bedroom M");
			var hallway1 = new GameEngine.Classes.Room(1,"Data/Map/Hallway_1/hallway_1.jpg", "Hallway entrance");
			var hallway2 = new GameEngine.Classes.Room(2, "Data/Map/Hallway_2/hallway_2.jpg", "Hallway");
			var hallway3 = new GameEngine.Classes.Room(3, "Data/Map/Hallway_3/hallway_3.jpg", "Hallway End");
			var kitchen  = new GameEngine.Classes.Room(11, "Data/Map/Kitchen/kitchen.JPG", "Kitchen");		
			var tvroom = new GameEngine.Classes.Room(12, "Data/Map/TvRoom/tvroom.jpg", "Tv-Room");
			GameEngine.GlobalRooms.push(hallway1,hallway2,hallway3,prebedroom,bedroom1,bedroom2,bedroom3,bedroom4,bedroom5,bedroom6,tvroom,tvroom,bathroom);
						
		},
		
		BuildRooms : function(){
			
			//Bygger hallway1:
			     //GameEngine.GlobalRooms[0]
			//var h = GameCardsCollectionData[0];
		},
		
		generateActor : function(){
			
			//Init all Actor
			var actor1 = new GameEngine.Classes.Actor("Lulle", 1, "Data\Characters\char_1\lulle.jpg");
			var actor2 = new GameEngine.Classes.Actor("Billy", 2, "Data\Characters\char_2\billy.jpg");
			var actor3 = new GameEngine.Classes.Actor("Bobb", 3, "Data\Characters\char_3\bobb.jpg");
			var actor4 = new GameEngine.Classes.Actor("Ben", 4, "Data\Characters\char_4\Ben.jpg");
			var actor5 = new GameEngine.Classes.Actor("Loue", 5, "Data\Characters\char_5\Loue.jpg");
			var actor5 = new GameEngine.Classes.Actor("Tom", 6, "Data\Characters\char_6\Tom.jpg");
												
			
			//Change Murderurs cards (To fit the game)
			
			//Get attribut for Murderur
			
			//Get Attributes for all actors except from murderur
		},
		
		PickMurderMotive : function(){
			
			//Select random Motive
			
			//Select Cards Based Of Motive
			
		}
		
		
		
	},
	
	Classes : {
		
		GameHud : function(){
			this.ActiveRoom = GameEngine.Classes.Room; // Ska innehålla det aktiva rummet..
			//Hud och Tools ska ligga här också...
		},
		
		GameCard : function(_ID, _type, _Content, _needTheseCards, _image, _AnswerCards){
			this.ID = _ID;
			
			this.type = _type // Kan vara antingen personlighetsakerna (secret, other, intress, relation) eller:
							//-WallClue  	=Om ledtråden endast går att ha på väggen
							//-TableClue	=Om ledtråden endast går att ha på en platt yta (golv, bord, etc)
							
			this.Content = _Content; // innehåller en beskrivning av ledtråden, om ej är ledtråd så blir denna null..
								
			this.needTheseCards = _needTheseCards;// ID'n till GameCards som behövs för att denna Ledtråd ska visas
			
			this.image = _image;	//URL till bilden som används för denna typ av ledtråd
					
			this.AnswerCards  = _AnswerCards;	// I form av CardData! 			 							
			
			//this.name = ""; // Kanske inte nödvändigt? .. 
			//this.motive = ""; // Om kortet är motivbaserat så kan man ange det här
			//this.isMurder = false;
			//this.isLie	= false;	
		},
		
		CardData : function(_emotionState, _content, _followUp, _name, _owner){
			this.emotionState = _emotionState; 	//Stadiet Aktören hamnar i när frågan ställs. 
			this.content = _content; 			//Svaret på frågan som ställs i "name"..
			this.followUp = _followUp; 		// En array med CardData på FöjFrågor
			this.name = _name; 			// Själva frågan du ställer
			this.owner = _owner; 			//Id't på den Actor som kan säga detta kort. Obs är NULL om GameCard inte är en ledtrådsTyp	
		},
		
		Container : function(){		
			this.cardsOfContainer = []; 	// Varje Container kan innehålla max 3 GameCards
			this.image = ""; 				//URL till bilden Containern använder
		},
		
		Room : function(ID, image, roomname){
			this.ID = ID;
			this.roomname = roomname;		//Namnen på rummen
			this.Containers = []; 			//Varje rum kan innehålla 3 Containers, varav 2 är Papperskorg och Garderob ()
			this.TableClue_GameCards = [];  //Varje rum kan innehålla max 5 GameCards av typen TableClue
			this.WallClue_GameCards = []; 	//Varje rum kan innehålla max 2 Gamecards av typen WallClue
			this.image = image; 			//URL till bilden som används för rummet..
			this.ActorsInRoom = [];			//En Array som innehåller ID't på alla aktörer i rummet..
			this.WayPoints = []; 			//En array med WayPoints-Object som är "Knappar" man kan trycka på för att ta sig till nästa rum eller tillbaka..
											//Ett rum har minst 1 Waypoint, det är alltid bakåt och refererar till rummet man var i Innan.
		},
		
		WayPoint : function(){
			this.GoToRoom = 0; 			//Ett ID som symboliserar vilket rum man kommer i när man trycker på denna Waypoint
			this.image = "";			//URL med bild på dörren(knappen) som tar dig till det andra rummet
			this.Name = ""; 			//Namnet på rummet som man kommer till när man trycker...
		},
		
		Actor : function(_name, _ID, _image){
			this.name = _name;				//Namnet på aktören..
			//this.isMurder = false;		
			this.ID = _ID;				//Alla Actors har ett ID som representerar vem dem är
			this.Secret = null; 		//GameCard av typen "Secret"
			this.Other = null;			//GameCard av typen "Other"
			this.Intress = null;		//GameCard av typen "intress"
			this.Relation = null;		//GameCard av typen "Relation"
			this.emotionState = "neutral";	//Vilken sinnesställning karaktären har, olika sinneställningar:
										//-Irriterad|anoyed,
										//-Glad|Happy
										//-Neutral|Neutral
										//-Nervös|nervous
										//-Arg|Angry
										//-Bekymrad|Concerned						
			this.ClueList = []; 		//En array med ledtrådar relaterade till Aktören
			this.image = _image;        //Url till Bild..
		},
		
		Player : function(){
			this.TimePoints = 150; 			//Spelaren börjar med (preliminärt) 150 Tidspoäng.
			this.QuestionHolder = function(){//En funktion som anropas för att ställa frågor.
				
				//Fråga om Aktörernas Personligheter (Other, Secret, Intress, relation...)
				
				//Hämta upp FollowUps Från Korten^...
				
				//De två nedre alternativen ska alltid vara möjliga att göra i början av en konversation
				//Flirt = Säg något posetivt till en Aktör för att få den att änrda Emotionstate
				
				//Threat = Hota för att påverka aktörens emotionstate
				
				//Den under ska alltid vara möjlig att göra närsom under en konversation
				//Leave = Lämna konversationen.
			};
		},
		
		GameCardType : function(){		
			
			var CardEnum = {
				"Secret" : 0,
				"Other" : 1,
				"Intress" : 2,
				"Relationship" : 3,		
				"WallClue" : 4,
				"TableClue" : 5	
			};
		}
	}

};



window.onload = function(){
	GameEngine.init();
	GameData.initData();
	
};
